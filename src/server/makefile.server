# Build the server
# Pass the MODE=DBG argument if you need a debug mode compilation.

# Analyze the program with valgrind (Interaction & Upload):
# valgrind --tool=memcheck --leak-check=yes --track-origins=yes ../../bin/release/prg_serv

# Default target - must be at the top of makefile that allows to execute 'all' automatically
.PHONY: all clean debug
all: TITLE RPC_BUILD SRV_BUILD

# Directories
# The final dir name where the source & object files resides
D_SRV := $(notdir $(CURDIR))
D_CMN := common
D_RPC := rpcgen

# The target dirs for object and executable files
ifeq ($(MODE),DBG)
  OPT_MODE := -g -Wall
  D_MODE := debug
else
  OPT_MODE :=
  D_MODE := release
endif
D_OBJ_SRV := ../../obj/$(D_MODE)/$(D_SRV)
D_OBJ_CMN := $(subst $(D_SRV),$(D_CMN),$(D_OBJ_SRV))
D_OBJ_RPC := $(subst $(D_SRV),$(D_RPC),$(D_OBJ_SRV))
D_BIN := ../../bin/$(D_MODE)

# Dependency compiler options
OPT_DEPS := -MMD -MP

# RPC sources
SRC_RPC_X := ../$(D_RPC)/fltr.x

# Server sources
SRC_MAIN := prg_serv.c
SRC_SRV := $(SRC_MAIN)
SRC_CMN := ../$(D_CMN)/fs_opers.c ../$(D_CMN)/mem_opers.c

# The object files with respective paths
OBJ_RPC := $(D_OBJ_RPC)/$(notdir $(subst .x,_svc.o,$(SRC_RPC_X))) \
			$(D_OBJ_RPC)/$(notdir $(subst .x,_xdr.o,$(SRC_RPC_X)))
OBJ_SRV := $(addprefix $(D_OBJ_SRV)/,$(subst .c,.o,$(SRC_SRV))) \
			$(addprefix $(D_OBJ_CMN)/,$(notdir $(subst .c,.o,$(SRC_CMN))))
OBJS := $(OBJ_SRV) $(OBJ_RPC)

# Final executable
EXE := $(D_BIN)/$(subst .c,,$(SRC_MAIN))

# Including the TI-RPC header files as the system ones allows 
# to not include them to the dependencies files
INCL := -isystem /usr/include/tirpc

LIBS := -lnsl -ltirpc

# Commands
CC := gcc
CMD_CREATE_DIR = mkdir -p $(dir $@)

MSG_COMP = echo "Compiling $(notdir $<) -> $(notdir $@):"
CMD_COMP = $(CC) $(OPT_MODE) $(OPT_DEPS) $(INCL) -c $< -o $@

MSG_LINK = echo "Linking $(notdir $@):"
CMD_LINK = $(CC) $(OPT_MODE) $^ $(LIBS) -o $@

# Include automatically generated dependencies related to server
-include $(OBJ_SRV:.o=.d)

DLM:="---------------"

### Execution
TITLE:
	@echo "$(DLM) Server build $(DLM)"

# RPC object files must be generated before building the server
RPC_BUILD: $(OBJ_RPC)

$(OBJ_RPC): $(SRC_RPC_X)
	@echo "Building RPC files"
	@cd ../$(D_RPC) && make --no-print-directory -f makefile.rpc

# Build the server
SRV_BUILD: $(EXE)

$(EXE): $(OBJS)
	@$(CMD_CREATE_DIR)
	@$(MSG_LINK)
	$(CMD_LINK)

$(D_OBJ_SRV)/%.o: %.c
	@$(CMD_CREATE_DIR)
	@$(MSG_COMP)
	$(CMD_COMP)

$(D_OBJ_CMN)/%.o: ../$(D_CMN)/%.c
	@$(CMD_CREATE_DIR)
	@$(MSG_COMP)
	$(CMD_COMP)

# Clean rule to remove build artifacts
clean:
	@echo "$(DLM) Server clean $(DLM)"
	@rm -fv $(EXE) $(OBJ_SRV) $(OBJ_SRV:.o=.d)
	@cd ../$(D_RPC) && make --no-print-directory -f makefile.rpc clean

# Debug rule to print all variables
debug:
	@echo "$(DLM) Server debug info $(DLM)"
	@echo "D_OBJ_SRV: $(D_OBJ_SRV)"
	@echo "D_OBJ_CMN: $(D_OBJ_CMN)"
	@echo "D_OBJ_RPC: $(D_OBJ_RPC)"
	@echo
	@echo "SRC_SRV: $(SRC_SRV)"
	@echo "SRC_CMN: $(SRC_CMN)"
	@echo "SRC_RPC_X: $(SRC_RPC_X)"
	@echo
	@echo "OBJ_SRV: $(OBJ_SRV)"
	@echo "OBJ_RPC: $(OBJ_RPC)"
	@echo "OBJS: $(OBJS)"
	@echo
	@echo "Dependency files: $(OBJ_SRV:.o=.d)"
	@echo
	@echo "EXE: $(EXE)"
