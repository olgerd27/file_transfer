# Build the client
# TODO: decide maybe split build on 2 stages:compilation the source files with gathering
#       the object file and then linkage the obtained object files into the client program.
# TODO: decide where to store the object files: in the same dirs where sources reside or in a separate dir.
# Analyze the client program with valgrind (Interaction & Upload):
# $> valgrind --tool=memcheck --leak-check=yes --track-origins=yes ./prg_clnt -u vmfedora -i

# Initial sources
SRC_MAIN:=prg_clnt.c
SRC:=$(SRC_MAIN) interact.c ../common/fs_opers.c ../common/mem_opers.c 

# Client RPC sources
SRC_RPC_CLN:=../rpcgen/fltr_clnt.c

# XDR RPC files
OBJ_RPC_XDR:=../rpcgen/fltr_xdr.o

# Header files the program depends on
HDR:=interact.h ../common/fs_opers.h ../common/mem_opers.h

# Executables
EXE:=$(subst .c,,$(SRC_MAIN))

INCL:=-I/usr/include/tirpc
LIBS:=-lnsl -ltirpc

DLM:="---------------"

### Execution
all: TITLE $(EXE)

TITLE:
	@echo "$(DLM) Client build $(DLM)"

# TODO: add dependencies on $(HDR) for $(EXE) or the source file it depends on.
#       Try to use the automatic dependency generation using tools like 'gcc -MM' 
#       to simplify the maintenance of dependencies.
$(EXE): $(SRC) $(SRC_RPC_CLN) $(OBJ_RPC_XDR) $(HDR)
	gcc -g $^ $(INCL) -o $@ $(LIBS)

clean:
	@echo "$(DLM) Client clean $(DLM)"
	@rm -fv $(EXE)

debug:
	@echo "SRC_MAIN: $(SRC_MAIN)"
	@echo "SRC: $(SRC)"
	@echo "SRC_RPC_CLN: $(SRC_RPC_CLN)"
	@echo "OBJ_RPC_XDR: $(OBJ_RPC_XDR)"
	@echo "EXE: $(EXE)"
